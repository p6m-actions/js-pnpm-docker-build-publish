name: "JavaScript PNPM Docker Build and Publish"
description: "Builds and publishes a Docker image for a JavaScript application"
author: "Jimmie Fulton <jimmie.fulton@gmail.com>"

# Define the inputs for this action
inputs:
  platforms:
    description: "The platforms to build for (comma-separated)"
    required: false
    default: "linux/amd64,linux/arm64"
  app-name:
    description: "The name of the application to build (defaults to repository name)"
    required: false
    default: ""
  version:
    description: "The version to use for the Docker image (defaults to version from package.json)"
    required: false
    default: ""
  tag-latest:
    description: "Whether to also tag the image as 'latest'"
    required: false
    default: "true"
  dockerfile:
    description: "Path to the Dockerfile"
    required: false
    default: "Dockerfile"
  context:
    description: "Docker build context"
    required: false
    default: "."
  registry:
    description: "Docker registry URL"
    required: true

# Define the outputs for this action
outputs:
  image-digest:
    description: "The digest of the built Docker image"
    value: ${{ steps.build-image.outputs.digest }}
  image-name:
    description: "The full name of the built image (with version tag)"
    value: ${{ steps.build-image.outputs.image-name }}
  version:
    description: "The version used for tagging the image"
    value: ${{ steps.build-image.outputs.version }}

# Define the runs configuration
runs:
  using: "composite"
  steps:
    - name: Build and push Docker image
      id: build-image
      shell: bash
      run: |
        # Determine app name
        if [ -n "${{ inputs.app-name }}" ]; then
          APP_NAME="${{ inputs.app-name }}"
        else
          # Extract app name from repository name
          APP_NAME=$(basename ${GITHUB_REPOSITORY})
        fi
        
        # Determine version
        if [ -n "${{ inputs.version }}" ]; then
          VERSION="${{ inputs.version }}"
        else
          # Extract version from package.json using pnpm
          if [ -f "package.json" ]; then
            VERSION=$(pnpm -s pkg get version)
            # Remove quotes if present
            VERSION="${VERSION//\"/}"
            echo "Extracted version from package.json: ${VERSION}"
          else
            echo "package.json not found. Using 'latest' as version."
            VERSION="latest"
          fi
        fi
        
        # Build full image names
        VERSIONED_IMAGE="${{ inputs.registry }}/${APP_NAME}:${VERSION}"
        
        # Build tag arguments
        TAGS="-t ${VERSIONED_IMAGE}"
        
        # Add latest tag if requested
        if [ "${{ inputs.tag-latest }}" = "true" ]; then
          LATEST_IMAGE="${{ inputs.registry }}/${APP_NAME}:latest"
          TAGS="${TAGS} -t ${LATEST_IMAGE}"
        fi
        
        echo "Building and pushing Docker image: ${VERSIONED_IMAGE}"
        if [ "${{ inputs.tag-latest }}" = "true" ]; then
          echo "Also tagging as: ${LATEST_IMAGE}"
        fi
        
        # Build and push the image
        docker buildx build \
          --platform ${{ inputs.platforms }} \
          ${TAGS} \
          -f ${{ inputs.dockerfile }} \
          --push \
          ${{ inputs.context }}
        
        # Get the image digest
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${VERSIONED_IMAGE} | cut -d'@' -f2)
        
        if [ -n "$DIGEST" ]; then
          echo "Image digest: $DIGEST"
        else
          echo "Warning: No digest found for ${VERSIONED_IMAGE}"
        fi
        
        # Set outputs
        echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
        echo "image-name=${VERSIONED_IMAGE}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

# Define the branding for the action in the GitHub Marketplace
branding:
  icon: "package"
  color: "blue"